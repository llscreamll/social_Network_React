{"version":3,"sources":["components/images/avatar.jpg","components/Profile/MyPosts/MyPosts.module.css","utils/validators/validators.ts","components/Profile/MyPosts/Post/Post.module.css","api/api.ts","redux/dialogs-reducer.ts","api/users-api.ts","redux/users-reducer.ts","components/Common/FormsControls/FormsControls.tsx","redux/app-reducer.ts","theme.ts","components/Header/Header.tsx","api/profile-api.ts","redux/profile-reducer.ts","components/Profile/profileStatus/ProfileStatus.tsx","components/Profile/ProfileDataForm/ProfileDataForm.tsx","components/Profile/pfofileData/ProfileData.tsx","components/Profile/profileInfo/MyProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","AppContent/AppContent.tsx","App.tsx","serviceWorker.js","redux/sideBar-reducer.ts","redux/redux-store.ts","index.tsx","components/Common/Reloader.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Common/FormsControls/FormsControlsClass.module.css"],"names":["module","exports","required","value","undefined","maxLengthCreator","maxLength","length","ResultCodesEnum","ResultCodesCaptchaEnum","instance","axios","create","withCredentials","baseURL","headers","initialState","messages","id","mes","users","user","actions","addNewMessages","message","type","dialogsReducer","state","action","usersAPI","getUsers","pageNumber","pageSize","term","friend","get","then","response","data","postUsersFollow","userID","post","deleteUsersFollow","delete","totalUserCount","currentPage","isFetching","followingInProgress","filter","payload","getUsersThunk","page","dispatch","getState","a","items","totalCount","follow","UserId","_followUnfollowFlow","bind","unFollow","apiMethod","resultCode","usersReducer","map","el","followed","FormControl","meta","error","touched","children","hasError","className","style","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","initialized","appReducer","useStyles","makeStyles","theme","createStyles","root","flexGrow","navbarStyles","marginBottom","background","menuButton","marginRight","spacing","title","navActiveClass","color","navbarPaper","top","position","height","navMenuButton","width","display","justifyContent","alignItems","avatarLogin","fontSize","fontWeight","navbarText","marginLeft","AppHeader","classes","useSelector","auth","login","isAuth","imageUser","profilePages","profile","photos","small","useDispatch","history","useHistory","AppBar","Toolbar","to","IconButton","edge","aria-label","Typography","variant","Button","Avatar","alt","src","onClick","Logout","setTimeout","push","profileAPI","userId","status","put","photoFile","formData","FormData","append","posts","like","preloaderUsers","newPost","preloader","postId","editProfile","profileReducer","ProfileStatus","useState","editMode","setEditMode","setStatus","useEffect","Card","noValidate","autoComplete","TextField","autoFocus","onBlur","e","currentTarget","updateStatusProfileThunk","onChange","label","ProfileDataFormRedux","reduxForm","form","infoUser","handleSubmit","edithMode","isOwner","Paper","elevation","Grid","container","xs","item","Object","keys","contacts","List","key","formSummaryError","disableElevation","ProfileData","ObjKeysProfileContacts","aboutMe","ListItem","lookingForAJob","lookingForAJobDescription","CardActions","size","margin","transitionProperty","borderRadius","MyProfileInfo","profiles","setProfiles","sm","md","large","avatarImages","file","target","files","accept","htmlFor","direction","fullName","initialValues","onSubmit","dataForm","stopSubmit","_error","Promise","reject","Post","userImg","messagePost","maxLengthCreator500","AddNewPostFormText","MyPosts","postText","postItem","Profile","authorizedUserId","useParams","refreshProfile","userIdNumber","getUsersProfiles","DialogsContainer","React","lazy","UsersContainer","Login","News","Music","Settings","AppContent","exact","path","Suspense","fallback","App","authMeRegister","maxWidth","activeClassName","Hidden","smDown","Boolean","window","location","hostname","match","friends","sidebarReducer","rootReducer","combineReducers","dialogsPage","sideBar","usersPage","authReducer","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","marginTop","Preloader","autAPI","email","password","rememberMe","captcha","securityAPI","urlCaptcha","Success","LoginEntrance","Error","CaptchaIsRequired","url"],"mappings":"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","file":"static/js/main.071f77e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.32a0571b.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__2rvkO\",\"text\":\"MyPosts_text__igC4c\",\"postItem\":\"MyPosts_postItem__1iz4d\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required : FieldValidatorType = (value) => {\r\n    if (value !== undefined && value !== \"\") return undefined;\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength : number ) : FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `max length ${maxLength} symbols`;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3LfNc\",\"messagePost\":\"Post_messagePost__S_8UY\",\"deleteButton\":\"Post_deleteButton__3CaqO\"};","import axios from \"axios\";\r\nimport { UserType } from \"../types/types\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL : \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"b151adfe-6c84-499c-a129-c58da07da97d\"\r\n    }\r\n})\r\n\r\nexport type ApiResponseType<D = {},RC = ResultCodesEnum > = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode : RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success=0,\r\n    Error=1,\r\n}\r\nexport enum ResultCodesCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\nexport type GetItemsType = {\r\n    items : Array<UserType>\r\n    totalCount : number\r\n    error : string | null\r\n\r\n}\r\n","import { PropertiesTypes} from \"../types/types\"\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\ntype messagesType = {\r\n    id: number,\r\n    mes: string\r\n}\r\ntype usersType = {\r\n    id: number,\r\n    user: string\r\n}\r\nlet initialState = {\r\n\r\n    messages: [\r\n        {id: 1, mes: \"hello!\"},\r\n        {id: 2, mes: \"how are you doing?\"},\r\n        {id: 3, mes: \"checking messages\"},\r\n        {id: 4, mes: \"I see you =)\"}\r\n    ] as Array<messagesType>,\r\n    users: [\r\n        {id: 1, user: \"Alex\"},\r\n        {id: 2, user: \"Max\"},\r\n        {id: 3, user: \"Sergey\"},\r\n        {id: 4, user: \"Ira\"},\r\n    ] as Array<usersType>,\r\n\r\n}\r\nconst dialogsReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_NEW_MESSAGE\" :\r\n\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 7, mes: action.message}],\r\n                users: [...state.users, {id: 5, user: \"You\"}]\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\ntype ActionsType = ReturnType<PropertiesTypes<typeof actions>>\r\n\r\n\r\n\r\nexport const actions = {\r\n    addNewMessages : (message: string) => ({type: 'ADD_NEW_MESSAGE', message} as const)\r\n}\r\n\r\nexport default dialogsReducer;","import {ApiResponseType, GetItemsType, instance} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(pageNumber = 1, pageSize = 10, term: string = \"\", friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${pageNumber}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`))\r\n            .then(response => response.data)\r\n\r\n    },\r\n    postUsersFollow(userID: number) {\r\n        return instance.post<ApiResponseType>(`follow/${userID}`)\r\n            .then(response => response.data)\r\n    },\r\n    deleteUsersFollow(userID: number) {\r\n        return instance.delete<ApiResponseType>(`follow/${userID}`)\r\n            .then(response => response.data)\r\n    }\r\n}","import {BaseThunkType, PropertiesTypes, UserType} from \"../types/types\";\r\nimport {usersAPI} from \"../api/users-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ApiResponseType} from \"../api/api\";\r\n\r\n\r\nexport type initialStateType = typeof initialState\r\ntype ActionsTypes = ReturnType<PropertiesTypes<typeof actions>>\r\n\r\nexport type FilterType = typeof initialState.filter\r\n\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 32,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>, // array of users id\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as boolean | null\r\n    }\r\n\r\n};\r\n\r\nexport let usersReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'TOGGLE_FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(el => {\r\n                    if (el.id === action.userID) {\r\n                        return {...el, followed: !el.followed}\r\n                    }\r\n                    return el\r\n                }),\r\n            }\r\n        case  \"SET_USERS\": {\r\n            return {...state, users: action.users}\r\n        }\r\n\r\n        case 'SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUserCount: action.totalUserCount}\r\n        }\r\n        case 'TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"SET_FILTER\": {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ?\r\n                    [...state.followingInProgress, action.userID]\r\n                    :\r\n                    state.followingInProgress.filter(id => id !== action.userID)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const actions = {\r\n    followToggle: (userID: number) => ({type: 'TOGGLE_FOLLOW', userID} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SET_CURRENT_PAGE', currentPage} as const),\r\n\r\n    setFilter: (filter: FilterType) => ({type: 'SET_FILTER', payload: filter} as const),\r\n\r\n    totalUserCounts: (totalUserCount: number) => ({type: 'SET_TOTAL_USERS_COUNT', totalUserCount} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userID: number) => ({\r\n        type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userID\r\n    } as const)\r\n\r\n\r\n}\r\n\r\n\r\nexport const getUsersThunk = (page: number, pageSize: number, filter: FilterType ): ThunkType => async (dispatch, getState) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(page))\r\n    dispatch(actions.setFilter(filter))\r\n\r\n\r\n    let data = await usersAPI.getUsers(page, pageSize, filter.term,filter.friend)\r\n\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.totalUserCounts(data.totalCount));\r\n    dispatch(actions.toggleIsFetching(false));\r\n}\r\n\r\nexport const follow = (UserId: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, UserId, usersAPI.postUsersFollow.bind(UserId))\r\n}\r\nexport const unFollow = (UserId: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, UserId, usersAPI.deleteUsersFollow.bind(UserId));\r\n}\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\r\n                                   UserId: number,\r\n                                   apiMethod: (userId: number) => Promise<ApiResponseType>) => {\r\n    dispatch(actions.toggleFollowingProgress(true, UserId))\r\n    let data = await apiMethod(UserId);\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.followToggle(UserId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, UserId))\r\n}\r\n\r\nexport default usersReducer;\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport style from \"./FormsControlsClass.module.css\"\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: { error?: any, touched: boolean }\r\n}\r\n\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {error, touched}, children}) => {\r\n    const hasError = error && touched;\r\n\r\n    return (\r\n        <div className={`${style.formControl} ${hasError ? style.error : \"\"}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError ? <span>{error}</span> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\n\r\nexport function createField<FormKeysType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeysType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<WrappedFieldProps>,\r\n    props: {} | undefined = {},\r\n    text: string | undefined = \"\",) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                component={component}\r\n                validate={validators}\r\n                name={name}\r\n                {...props}\r\n\r\n            />\r\n            {text}\r\n        </div>\r\n    )\r\n}","import { PropertiesTypes } from \"../types/types\";\r\nimport {authMeRegister} from \"./auth-reducer\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\ntype ActionsType = ReturnType<PropertiesTypes<typeof actions>>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\" :\r\n\r\n            return {...state, initialized: true}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nconst actions = {\r\n    initializedSuccess : () => ({type: 'INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\n\r\nexport const initializeApp = () => async (dispatch: any) => {\r\n    await dispatch(authMeRegister());\r\n    await dispatch(actions.initializedSuccess());\r\n\r\n\r\n}\r\nexport default appReducer;","import {makeStyles, createStyles} from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles((theme) => createStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    navbarStyles: {\r\n        marginBottom: '30px',\r\n        background:'linear-gradient(90deg, #89f7fe 0%,#3f51b5 100%)',\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    navActiveClass: {\r\n        '& *': {\r\n            color: 'rgb(63,81,181)',\r\n        },\r\n\r\n    },\r\n\r\n    navbarPaper: {\r\n        top: 0,\r\n        position: 'sticky',\r\n        height:'100vh',\r\n    },\r\n    navMenuButton: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',\r\n        marginBottom: '10%',\r\n    },\r\n    avatarLogin: {\r\n        display: 'flex',\r\n        justifyContent: 'space-around',\r\n        alignItems:'center',\r\n        width: '240px',\r\n        '& p': {\r\n            color: 'white',\r\n            fontSize:'20px',\r\n            fontWeight: 400,\r\n        }\r\n    },\r\n    navbarText: {\r\n        fontWeight: 700,\r\n        marginLeft: '10%'\r\n    }\r\n\r\n}));\r\n\r\n","import React from 'react'\r\nimport {Link, NavLink, useHistory} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Button, Toolbar, Typography} from '@material-ui/core';\r\nimport {useStyles} from \"../../theme\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nconst AppHeader = () => {\r\n    const classes = useStyles()\r\n    const {login, isAuth} = useSelector((state: AppStateType) => state.auth)\r\n    const imageUser = useSelector((state: AppStateType) => state.profilePages.profile?.photos?.small)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const logoutOut =  () => {\r\n        dispatch(Logout())\r\n        setTimeout(()=>{\r\n            history.push('/')\r\n        },100)\r\n    }\r\n    return (\r\n        <AppBar className={classes.navbarStyles} color={\"primary\"} position=\"static\">\r\n            <Toolbar>\r\n\r\n                <Link to={\"/\"}>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon color={\"primary\"}/>\r\n                    </IconButton>\r\n                </Link>\r\n\r\n                <Typography variant=\"h6\" color={\"primary\"} className={classes.title}>\r\n                    Social Network\r\n                </Typography>\r\n                {(isAuth === false) ?\r\n                    <NavLink to={'/login'}>\r\n                        <div><Button>Login</Button></div>\r\n                    </NavLink>\r\n                    :\r\n                    <>\r\n                        <div className={classes.avatarLogin}>\r\n                            <Typography variant={\"h6\"}>{login}</Typography>\r\n                            <Avatar alt=\"Cindy Baker\" src={imageUser as string}/>\r\n                            <IconButton color={\"secondary\"} onClick={logoutOut}><ExitToAppIcon/></IconButton>\r\n                        </div>\r\n\r\n                    </>}\r\n            </Toolbar>\r\n        </AppBar>\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default AppHeader;\r\n\r\n\r\n\r\n","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {ApiResponseType, instance} from \"./api\";\r\n\r\ntype PhotosSaveType ={\r\n    photos : PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfileUsers(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ApiResponseType>(`profile/status`, {\r\n            status: status\r\n        })\r\n    },\r\n    savePhotoUser(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<ApiResponseType<PhotosSaveType>>(`profile/photo`, formData)\r\n            .then(response => response.data)\r\n    },\r\n    saveProfileToServer(profile: ProfileType) {\r\n        return instance.put<ApiResponseType>(`profile/`, profile)\r\n            .then(response => response.data)\r\n    },\r\n\r\n\r\n}","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, PhotosType, postType, ProfileType, PropertiesTypes} from \"../types/types\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, like: 15, mes: \"hello!\"},\r\n        {id: 2, like: 10, mes: \"how are you doing?\"},\r\n        {id: 3, like: 5, mes: \"checking messages\"},\r\n        {id: 4, like: 31, mes: \"I see you =)\"}] as Array<postType>,\r\n    profile: null as ProfileType | null,\r\n    preloaderUsers: false as true | false,\r\n    status: null as string | null\r\n};\r\n\r\ntype initialStateType = typeof initialState\r\n\r\n\r\ntype ActionsType = ReturnType<PropertiesTypes< typeof actions>>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        case 'ADD_POST':\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {\r\n                    id: (state.posts.length - 1 >= 0) ? state.posts[state.posts.length - 1].id + 1 : 1,\r\n                    like: 0,\r\n                    mes: action.newPost\r\n                }]\r\n            }\r\n        case 'SET_USER_PROFILE':\r\n            return {\r\n                ...state, profile: action.profile , preloaderUsers: false // preloader  false\r\n            }\r\n        case 'SET_STATUS_PROFILE':\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case 'SET_USER_PHOTO': {\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        }\r\n        case 'SET_EDIT_PROFILE':\r\n            return {...state, profile: {...state.profile , ...action.editProfile } as ProfileType}\r\n\r\n        case 'IS_PRELOADER_USERS': {\r\n            return {...state, preloaderUsers: action.preloader}\r\n        }\r\n        case 'DELETE_POST': {\r\n            return {\r\n                ...state, posts: [...state.posts.filter(id => id.id !== action.postId)]\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n     addPostActionCreator : (newPost: string) => ({type: 'ADD_POST', newPost} as const),\r\n    setPreloaderUsers : (preloader: false | true) => ({type: 'IS_PRELOADER_USERS', preloader} as const),\r\n    deletePost : (postId: number) => ({type: 'DELETE_POST', postId} as const),\r\n    setUsersProfile : (profile: ProfileType | null) => ({type: 'SET_USER_PROFILE', profile} as const),\r\n    setStatusProfile : (status: string) => ({type: 'SET_STATUS_PROFILE', status} as const),\r\n    setSavePhoto : ( photos : PhotosType ) => ({type: 'SET_USER_PHOTO', photos} as const),\r\n    saveProfileInfo : (editProfile: ProfileType | null) => ({type: 'SET_EDIT_PROFILE', editProfile} as const)\r\n}\r\n\r\n\r\n\r\nexport const getUsersProfiles = (userId: number) : ThunkType => async (dispatch) => {\r\n    let data= await profileAPI.getProfileUsers(userId)\r\n    dispatch(actions.setUsersProfile(data))\r\n}\r\nexport const getStatusProfileThunk = (userID: number):ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userID)\r\n    dispatch(actions.setStatusProfile(data))\r\n\r\n}\r\nexport const updateStatusProfileThunk = (status: string):ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n\r\n    if (response.data.resultCode === 0) {\r\n\r\n        dispatch(actions.setStatusProfile(status))\r\n    }\r\n}\r\nexport const savePhoto = (file: File) : ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.savePhotoUser(file)\r\n    if (response.resultCode === 0) {\r\n\r\n        dispatch(actions.setSavePhoto(response.data.photos))\r\n    }\r\n}\r\nexport const saveProfile = (editProfile: ProfileType):ThunkType => async (dispatch) => {\r\n\r\n    let response = await profileAPI.saveProfileToServer(editProfile)\r\n    if (response.resultCode === 0) {\r\n        dispatch(actions.saveProfileInfo(editProfile))\r\n        debugger\r\n    } else {\r\n        let message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"profileEdit\", {_error: `${message}`}));\r\n        return Promise.reject(message);\r\n\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateStatusProfileThunk} from \"../../../redux/profile-reducer\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n\r\n}\r\nconst ProfileStatus: React.FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = (e: { currentTarget: { value: string; }; }) => {\r\n        if (props.status !== e.currentTarget.value && e.currentTarget.value !== \"\") {\r\n            dispatch(updateStatusProfileThunk(e.currentTarget.value))\r\n        }\r\n        setEditMode(false);\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n\r\n    }\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n            <Card>\r\n                <span>Status:</span> <span onClick={activateMode}>{status || \"Enter your status\"}</span>\r\n            </Card>\r\n            }{editMode &&\r\n        <form noValidate autoComplete=\"off\">\r\n            <TextField\r\n                autoFocus\r\n                onBlur={deactivateEditMode}\r\n                onChange={onStatusChange}\r\n                id=\"standard-basic\"\r\n                label=\"Standard\"\r\n            />\r\n        </form>\r\n\r\n        }\r\n        </>\r\n    )\r\n}\r\nexport default ProfileStatus;","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../Common/FormsControls/FormsControlsClass.module.css\";\r\nimport {contactsType, GetStringKeys, ProfileType} from \"../../../types/types\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CardContent from \"@material-ui/core/CardContent/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup/ButtonGroup\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    edithMode: () => void\r\n    infoUser: string\r\n}\r\nexport type ProfileDataFormType = {\r\n    fullName: string\r\n    lookingForAJob: string\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n    contacts: contactsType\r\n}\r\n\r\n\r\ntype ProfileDataFormTypeKeys = GetStringKeys<ProfileDataFormType>\r\n\r\nlet ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({infoUser, handleSubmit, profile, error, edithMode, isOwner}) => {\r\n\r\n    return (\r\n        <Paper variant=\"outlined\" elevation={3}>\r\n            <form>\r\n                <Grid container xs={12} className={infoUser}>\r\n                    <Grid item xs={6}>\r\n                        <CardContent>\r\n                            <Typography variant={\"h6\"} color={\"primary\"}>\r\n                                AboutMe:\r\n                            </Typography>\r\n                            <Typography variant={\"body2\"}>\r\n                                {createField<ProfileDataFormTypeKeys>(\"aboutMe\", \"aboutMe\", [], Textarea, {}, \"\")}\r\n                            </Typography>\r\n                            <Typography variant={\"h6\"} color={\"primary\"}>\r\n                                Full name:\r\n                            </Typography>\r\n                            <Typography variant={\"body2\"}>\r\n                                {createField<ProfileDataFormTypeKeys>(\"Full name\", \"fullName\", [], Input, {}, \"\")}\r\n                            </Typography>\r\n                            <Typography variant={\"h6\"} color={\"primary\"}>\r\n                                Contacts:\r\n                            </Typography>\r\n                            {Object.keys(profile.contacts).map((el, id) => {\r\n                                return (\r\n                                    <List\r\n                                        key={id}><b>{el}:</b> {createField(`${el}`, `contacts.${el}`, [], Input, {}, \"\")}\r\n                                    </List>\r\n                                )\r\n                            })}\r\n\r\n                            <Typography variant={\"h6\"} color={\"primary\"}>\r\n                                Looking for a job:\r\n                            </Typography>\r\n                            <Typography variant={\"body2\"}>\r\n                                {createField<ProfileDataFormTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"}, \"\")}\r\n                            </Typography>\r\n                            <Typography variant={\"h6\"} color={\"primary\"}>\r\n                                Explanation:\r\n                            </Typography>\r\n                            <Typography variant={\"body2\"}>\r\n                                {createField<ProfileDataFormTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea, {}, \"\")}\r\n                            </Typography>\r\n                            {error && <div className={style.formSummaryError}>{error}</div>}\r\n                        </CardContent>\r\n                    </Grid>\r\n                    <Grid container item xs={6}>\r\n                        <Grid xs={5}></Grid>\r\n                        <Grid xs={7}>\r\n                            <ButtonGroup disableElevation variant=\"contained\" color=\"primary\">\r\n                                <Button color={\"primary\"} onClick={handleSubmit}><SaveIcon/></Button>\r\n                                <Button color={\"secondary\"} onClick={edithMode}> <CloseIcon/></Button>\r\n                            </ButtonGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\n\r\nconst ProfileDataFormRedux = reduxForm<ProfileType, PropsType>({form: \"profileEdit\"})(ProfileDataForm)\r\n\r\n\r\nexport default ProfileDataFormRedux\r\n","import {ProfileType} from \"../../../types/types\";\r\nimport React from \"react\";\r\nimport CardContent from \"@material-ui/core/CardContent/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Fab from \"@material-ui/core/Fab/Fab\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    edithMode: () => void\r\n    infoUser: string\r\n\r\n}\r\n\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({infoUser, profile, edithMode, isOwner}) => {\r\n\r\n    const ObjKeysProfileContacts = profile.contacts\r\n\r\n    return (\r\n        <Paper variant=\"outlined\" elevation={3}>\r\n            <Grid container className={infoUser}>\r\n                <Grid item xs={6}>\r\n                    <CardContent>\r\n                        <Typography variant={\"h6\"} color={\"primary\"}>\r\n                            AboutMe:\r\n                        </Typography>\r\n                        <Typography variant={\"body2\"}>\r\n                            {profile.aboutMe}\r\n                        </Typography>\r\n                        <Typography variant={\"h6\"} color={\"primary\"}>\r\n                            Contacts:\r\n                        </Typography>\r\n                        <List>\r\n                            {(Object.keys(ObjKeysProfileContacts) as Array<keyof typeof ObjKeysProfileContacts>).map((el, id) => {\r\n                                return (\r\n                                    <ListItem key={`${id}_${el}`}><b>{el}:</b>\r\n                                        {ObjKeysProfileContacts[el] !== null && ObjKeysProfileContacts[el] !== undefined ? ObjKeysProfileContacts[el] : \"....\"}\r\n                                    </ListItem>\r\n                                )\r\n                            })}\r\n                        </List>\r\n                        <Typography variant={\"h6\"} color={\"primary\"}>\r\n                            Looking for a job:\r\n                        </Typography>\r\n                        <Typography variant={\"body2\"}>\r\n                            {profile?.lookingForAJob ? <i>Yes</i> : <i>No</i>}\r\n                        </Typography>\r\n                        <Typography variant={\"h6\"} color={\"primary\"}>\r\n                            Explanation:\r\n                        </Typography>\r\n                        <Typography variant={\"body2\"}>\r\n                            {profile?.lookingForAJobDescription\r\n                                ? profile.lookingForAJobDescription\r\n                                : \"...\"}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid container item xs={6}>\r\n                    <Grid item xs={5}></Grid>\r\n                    <Grid item xs={7}>\r\n                        <CardActions>\r\n                            {isOwner &&\r\n                            <Fab\r\n                                variant={\"extended\"}\r\n                                size={\"small\"}\r\n                                onClick={edithMode}\r\n                                color={\"default\"}\r\n                                aria-label=\"edit\">\r\n                                <EditIcon/>\r\n                            </Fab>\r\n                            }\r\n                        </CardActions>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n\r\n    )\r\n}\r\n\r\nexport default ProfileData;\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport Preloader from \"../../Common/Reloader\";\r\nimport avatarImages from \"../../images/avatar.jpg\"\r\nimport ProfileStatus from \"../profileStatus/ProfileStatus\";\r\nimport ProfileDataFormRedux from \"../ProfileDataForm/ProfileDataForm\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {savePhoto, saveProfile} from \"../../../redux/profile-reducer\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport ProfileData from \"../pfofileData/ProfileData\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n            },\r\n        },\r\n        input: {\r\n            display: 'none',\r\n        },\r\n        imageUser : {\r\n            width: '100%',\r\n            transitionProperty:'1s all initial'\r\n        },\r\n        infoUser :{\r\n            background:'linear-gradient(90deg, #89f7fe 0%,#3f51b5 100%)',\r\n            borderRadius:20\r\n        },\r\n        '@media (max-width: 960px)':{\r\n            imageUser : {\r\n                width: 300\r\n            }\r\n        },\r\n\r\n    }),\r\n);\r\n\r\n\r\ntype MyProfileInfoType = {\r\n    isOwner: boolean\r\n}\r\n\r\nlet MyProfileInfo: React.FC<MyProfileInfoType> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const {profile, status} = useSelector((state: AppStateType) => state.profilePages)\r\n    let [profiles, setProfiles] = useState(profile)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        setProfiles(profile)\r\n    }, [profile])\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    let edithMode = () => {\r\n        setEditMode(!editMode);\r\n    }\r\n\r\n    let onSubmit = (dataForm: ProfileType) => {\r\n        dispatch(saveProfile(dataForm))\r\n        setEditMode(!editMode)\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelector = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            dispatch(savePhoto(e.target.files[0]))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container spacing={3} >\r\n\r\n                <Grid item sm={12} md={5}>\r\n                    <img\r\n                        className={classes.imageUser}\r\n                        src={profiles?.photos?.large !== null ? profiles?.photos?.large as string : avatarImages}\r\n                    />\r\n                    {props.isOwner ? <> <input onChange={onMainPhotoSelector} accept=\"image/*\" className={classes.input}\r\n                                               id=\"icon-button-file\" type=\"file\"/>\r\n                        <label htmlFor=\"icon-button-file\">\r\n                            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                                <PhotoCamera/>\r\n                            </IconButton>\r\n                        </label> </> : \"\"}\r\n                </Grid>\r\n                <Grid container item sm={12} md={7}  direction=\"column\">\r\n                    <Grid item>\r\n                        <Typography variant={\"h4\"}>{profile.fullName}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <ProfileStatus status={status as string}/>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n\r\n            {editMode ?\r\n                <ProfileDataFormRedux\r\n                    infoUser={classes.infoUser}\r\n                    initialValues={profile}\r\n                    profile={profile}\r\n                    isOwner={props.isOwner}\r\n                    edithMode={edithMode}\r\n                    onSubmit={onSubmit}\r\n                />\r\n                :\r\n                <ProfileData profile={profile}\r\n                             infoUser={classes.infoUser}\r\n                             isOwner={props.isOwner}\r\n                             edithMode={edithMode}\r\n                />}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyProfileInfo;","import React from 'react'\r\nimport style from \"./Post.module.css\";\r\nimport userImg from \"../../../images/avatar.jpg\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {actions} from \"../../../../redux/profile-reducer\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport IconButton from '@material-ui/core/IconButton/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\n\r\n\r\ntype PostType ={\r\n    posts : string\r\n    like : number\r\n    id : number\r\n}\r\nconst Post : React.FC<PostType>= (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let postDelete = (postId : number) =>{\r\n        dispatch(actions.deletePost(postId))\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.post}>\r\n            <div>\r\n            <img style={{width:'70px'}} src={userImg} alt=\"\" />\r\n            </div>\r\n            <div className={style.messagePost}>\r\n            <div>\r\n            <p>{props.posts}</p>\r\n            </div>\r\n            <div>\r\n\r\n                <IconButton\r\n                    color={\"secondary\"}\r\n                    aria-label=\"delete\"\r\n                    onClick={()=>{postDelete(props.id)}}\r\n                >\r\n                    <DeleteIcon\r\n                        color={\"secondary\"}\r\n                        fontSize=\"default\" />\r\n                </IconButton>\r\n                <IconButton\r\n                    color={\"primary\"}\r\n                    aria-label=\"delete\"\r\n                >\r\n                    <ThumbUpAltIcon\r\n                        color={\"primary\"}\r\n                        fontSize=\"default\" />\r\n                </IconButton>\r\n            </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\nimport style from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\"\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {createField, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {GetStringKeys} from \"../../../types/types\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nconst maxLengthCreator500 = maxLengthCreator(500)\r\n\r\nconst MyPosts: React.FC = (): React.ReactElement => {\r\n\r\n    const posts = useSelector((state: AppStateType) => state.profilePages.posts)\r\n    const dispatch = useDispatch()\r\n\r\n    let newPostValue = (post: PostTextValuesType) => {\r\n        dispatch(actions.addPostActionCreator(post.postText));\r\n        post.postText = \"\";\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.posts}>\r\n            <i><h2>My posts:</h2></i>\r\n            <AddNewPostFormText onSubmit={newPostValue}/>\r\n            <div className={style.postItem}>\r\n                {posts.map((el) => <Post key={el.id}\r\n                                         posts={el.mes}\r\n                                         id={el.id}\r\n                                         like={el.like}\r\n                />)}\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\ntype OwnPropsType = {}\r\ntype PostTextValuesType = {\r\n    postText: string\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<PostTextValuesType>\r\n\r\nlet AddNewPostForm: React.FC<InjectedFormProps<PostTextValuesType, OwnPropsType & OwnPropsType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={style.text}>\r\n                {createField<LoginFormValuesTypeKeys>(\"your news...\", \"postText\", [required, maxLengthCreator500], Textarea)}\r\n            </div>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\nlet AddNewPostFormText = reduxForm<PostTextValuesType, OwnPropsType>({form: \"newPost\"})(AddNewPostForm)\r\n\r\nexport default MyPosts;","import React, {useEffect} from 'react'\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport MyProfileInfo from \"./profileInfo/MyProfileInfo\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {actions, getStatusProfileThunk, getUsersProfiles} from \"../../redux/profile-reducer\";\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport Preloader from \"../Common/Reloader\";\r\n\r\nconst Profile = (): React.ReactElement => {\r\n    const authorizedUserId = useSelector((state: AppStateType) => state.auth.userId)\r\n    const preloader = useSelector((state: AppStateType) => state.profilePages.preloaderUsers)\r\n    const {userId}: any = useParams()\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const isOwner = !userId;\r\n\r\n    useEffect(() => {\r\n        refreshProfile()\r\n    }, [userId])\r\n\r\n\r\n    let refreshProfile = () => {\r\n        dispatch(actions.setPreloaderUsers(true))\r\n        let userIdNumber: number | null | undefined = userId;\r\n\r\n        if (!userIdNumber) {\r\n            userIdNumber = authorizedUserId;\r\n            if (!userIdNumber) {\r\n                history.push(\"/login\")\r\n            }\r\n        }\r\n        dispatch(getUsersProfiles(userIdNumber as number))\r\n        dispatch(getStatusProfileThunk(userIdNumber as number))\r\n    }\r\n\r\n\r\n    if (preloader) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <>\r\n            <MyProfileInfo isOwner={isOwner}/>\r\n            <MyPosts/>\r\n        </>\r\n\r\n\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport Preloader from \"../components/Common/Reloader\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport Profile from \"../components/Profile/Profile\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('../components/Dialogs/DialogsContainer'));\r\nconst UsersContainer = React.lazy(() => import('../components/Users/UsersContainer'));\r\nconst Login = React.lazy(() => import('../components/Login/Login'));\r\nconst News = React.lazy(() => import('../components/News/News'));\r\nconst Music = React.lazy(() => import('../components/Music/Music'));\r\nconst Settings = React.lazy(() => import('../components/Settings/Settings'));\r\n\r\n\r\nconst AppContent = () => {\r\n    //authorization check\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    return (\r\n        <>\r\n            <Route exact path=\"/\"> {isAuth ? <Redirect to={\"/profile\"}/> :\r\n                <Redirect to={\"/login\"}/>} </Route>\r\n            <Route exact path=\"/social_Network_React/\"> {isAuth ? <Redirect to={\"/profile\"}/> :\r\n                <Redirect to={\"/login\"}/>} </Route>\r\n\r\n            <Route path=\"/profile/:userId?\"> <Profile/> </Route>\r\n            <React.Suspense fallback={<Preloader/>}>\r\n                <Route exact path=\"/messages\"> <DialogsContainer/> </Route>\r\n                <Route path=\"/users\"> <UsersContainer/> </Route>\r\n                <Route path=\"/login\"> <Login/> </Route>\r\n                <Route path=\"/news\"><News/></Route>\r\n                <Route path=\"/music\"> <Music/> </Route>\r\n                <Route path=\"/settings\"> <Settings/>\r\n                </Route>\r\n            </React.Suspense>\r\n        </>\r\n    )\r\n}\r\nexport default AppContent;","import React, {useEffect} from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport Preloader from './components/Common/Reloader';\nimport {AppStateType} from './redux/redux-store';\nimport AppHeader from \"./components/Header/Header\";\nimport AppContent from \"./AppContent/AppContent\";\nimport Button from '@material-ui/core/Button/Button';\nimport Container from '@material-ui/core/Container/Container';\nimport Grid from '@material-ui/core/Grid';\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\nimport {useStyles} from \"./theme\";\nimport {Hidden, Paper, Typography} from \"@material-ui/core\";\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\nimport MessageIcon from '@material-ui/icons/Message';\nimport NearMeIcon from '@material-ui/icons/NearMe';\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\n\n\nlet App = () => {\n    const initialized = useSelector((state: AppStateType) => state.appReducer.initialized)\n\n    const dispatch = useDispatch()\n    const classes = useStyles()\n\n    useEffect(() => {\n        dispatch(initializeApp())\n    }, [dispatch])\n\n    if (!initialized) return <Preloader/>\n    return (\n        <>\n            <AppHeader/>\n\n            <Container maxWidth={\"lg\"}>\n                <Grid container>\n                    <Grid item\n                          xs={2}\n                          sm={3}\n                    >\n                        <Paper elevation={1} className={classes.navbarPaper}>\n\n                            <NavLink to=\"/profile\"\n                                     activeClassName={classes.navActiveClass}>\n                                <Button  className={classes.navMenuButton}>\n                                    <PersonOutlineIcon fontSize={\"large\"}/>\n                                    <Hidden smDown>\n                                        <Typography className={classes.navbarText}>Профиль</Typography>\n                                    </Hidden>\n                                </Button>\n                            </NavLink>\n\n                            <NavLink to=\"/users\"\n                                     activeClassName={classes.navActiveClass}>\n                                <Button className={classes.navMenuButton}>\n                                    <PeopleAltIcon fontSize={\"large\"}/>\n                                    <Hidden smDown>\n                                        <Typography className={classes.navbarText}>Пользователи</Typography>\n                                    </Hidden>\n                                </Button>\n                            </NavLink>\n\n                            <NavLink to=\"/messages\"\n                                     activeClassName={classes.navActiveClass}>\n                                <Button className={classes.navMenuButton}>\n                                    <MessageIcon fontSize={\"large\"}/>\n                                    <Hidden smDown>\n                                        <Typography className={classes.navbarText}>Сообщения</Typography>\n                                    </Hidden>\n                                </Button>\n                            </NavLink>\n\n                            <NavLink to=\"/news\"\n                                     activeClassName={classes.navActiveClass}>\n                                <Button className={classes.navMenuButton}>\n                                    <NearMeIcon fontSize={\"large\"}/>\n                                    <Hidden smDown>\n                                        <Typography className={classes.navbarText}>Новости</Typography>\n                                    </Hidden>\n                                </Button>\n                            </NavLink>\n                            <NavLink to=\"/music\"\n                                     activeClassName={classes.navActiveClass}>\n                                <Button className={classes.navMenuButton}>\n                                    <MusicNoteIcon fontSize={\"large\"}/>\n                                    <Hidden smDown>\n                                        <Typography className={classes.navbarText}>Музыка</Typography>\n                                    </Hidden>\n                                </Button>\n                            </NavLink>\n                        </Paper>\n                    </Grid>\n\n                    <Grid item\n                          xs={10}\n                          sm={9}\n\n                    >\n                        <Paper elevation={1}>\n                            <AppContent/>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </>\n\n\n    )\n\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {\r\n    friends: [\r\n        { id: 1, user: \"Igor\" },\r\n        { id: 2, user: \"Sveta\" },\r\n        { id: 3, user: \"Pavel\" },],\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\nconst  sidebarReducer = (state = initialState,action : any) :initialStateType  =>{\r\n\r\n    return state;\r\n}\r\n\r\nexport default  sidebarReducer;","import {applyMiddleware, combineReducers, createStore,compose} from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nimport appReducer from \"./app-reducer\"\r\nimport profileReducer from \"./profile-reducer\"\r\nimport dialogsReducer from \"./dialogs-reducer\"\r\nimport sidebarReducer from \"./sideBar-reducer\"\r\nimport usersReducer from \"./users-reducer\"\r\nimport authReducer from \"./auth-reducer\"\r\n\r\n\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePages: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sideBar: sidebarReducer,\r\n    usersPage :usersReducer,\r\n    auth:authReducer,\r\n    appReducer: appReducer,\r\n    form:formReducer\r\n});\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\n// export type PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\n//export type InferActionsType<T extends {[key: string]: (...arg:any[])=> any}> = ReturnType<PropertiesTypes<T>>\r\n// export type InferActionsType<T> = T extends {[key: string]: (...arg:any[])=> infer U}  ? U : never\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(compose(applyMiddleware(thunk))))\r\n\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter   } from 'react-router-dom';\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\n\n\n  ReactDOM.render(\n      <Provider store={store} >\n    <BrowserRouter >\n      <App />\n    </BrowserRouter  >\n      </Provider>\n          ,\n    document.getElementById('root')\n  );\n\nserviceWorker.unregister();\n","import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\r\n    createStyles({\r\n        root: {\r\n            position:\"absolute\",\r\n            width: '100%',\r\n            '& > * + *': {\r\n                marginTop: theme.spacing(2)\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nlet Preloader  =  () => {\r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <LinearProgress color=\"secondary\" />\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Preloader ;","import {instance, ApiResponseType, ResultCodesCaptchaEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: null, email: string, login : string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId :number\r\n}\r\n\r\nexport const autAPI = {\r\n    authMe() {\r\n        return instance.get<ApiResponseType<MeResponseDataType>>(`auth/me`).then(response => response.data)\r\n    },\r\n    loginAuth(email: string, password: string, rememberMe = false, captcha: string | null = null) {\r\n        return instance.post<ApiResponseType<LoginResponseDataType | ResultCodesCaptchaEnum>>(`auth/login`, {\r\n            email, password, rememberMe, captcha\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n    logoutAuth() {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}","import {instance} from \"./api\";\r\n\r\ntype ResponseDataUrlType = {\r\n    url : string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<ResponseDataUrlType>(\"security/get-captcha-url\")\r\n            .then(response => response.data)\r\n    }\r\n}","import {ResultCodesCaptchaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {autAPI} from \"../api/auth-api\";\r\nimport { securityAPI } from \"../api/security-api\";\r\nimport {BaseThunkType, PropertiesTypes} from \"../types/types\";\r\n\r\n\r\ntype initialStateType = typeof initialState\r\ntype ActionTypes = ReturnType<PropertiesTypes<typeof actions>>\r\n\r\ntype ThunkType = BaseThunkType<ActionTypes | ReturnType<typeof stopSubmit> >\r\n\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n    urlCaptcha: null as string | null,\r\n    error: null as string | null\r\n}\r\nconst authReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_USER_DATA' :\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                error: \"\",\r\n            }\r\n        case 'ADD_ERROR_LOGIN' :\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n\r\n        case 'GET_CAPTCHA_URL':\r\n            return {\r\n                ...state,\r\n                urlCaptcha: action.urlCaptcha\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\nconst actions = {\r\n     setAuthUserData : (userId: number\r\n         | null, email: string\r\n         | null, login: string\r\n         | null, isAuth: boolean) => ({\r\n        type: 'SET_USER_DATA', payload: {userId, email, login, isAuth}} as const),\r\n     addErrorLogin : (message: string) => ({type:'ADD_ERROR_LOGIN',payload:message} as const),\r\n     setCaptchaUrlSecurity : (urlCaptcha: null | string) => ({type: 'GET_CAPTCHA_URL', urlCaptcha} as const)\r\n}\r\nexport const authMeRegister = () => async (dispatch: any) => {\r\n    const response = await autAPI.authMe();\r\n    if (response.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = response.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const LoginEntrance = (email: string, password: string, rememberMe: boolean, captcha?: string | null): ThunkType => async (dispatch) => {\r\n\r\n\r\n    const response = await autAPI.loginAuth(email, password, rememberMe, captcha)\r\n    if (response.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(authMeRegister())\r\n    } else if (response.resultCode === ResultCodesEnum.Error) {\r\n        const message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\r\n        dispatch(actions.addErrorLogin(message));\r\n    } else if (response.resultCode === ResultCodesCaptchaEnum.CaptchaIsRequired) {\r\n        let message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\r\n        dispatch(actions.addErrorLogin(message));\r\n        securityAPI.getCaptchaUrl()\r\n            .then((data) => {\r\n                dispatch(actions.setCaptchaUrlSecurity(data.url))\r\n            })\r\n    }\r\n}\r\nexport const Logout = ():ThunkType => async (dispatch) => {\r\n\r\n    const response = await autAPI.logoutAuth()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport default authReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControlsClass_formControl__1HU4R\",\"error\":\"FormsControlsClass_error__3orBB\",\"formSummaryError\":\"FormsControlsClass_formSummaryError__3iNiN\",\"testAccount\":\"FormsControlsClass_testAccount__kOUeR\",\"testValues\":\"FormsControlsClass_testValues__2YxEe\"};"],"sourceRoot":""}