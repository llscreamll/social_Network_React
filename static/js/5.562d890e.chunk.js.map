{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Users/Users.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Users","props","url","id","className","style","usersBG","to","users","maxLength90","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","formInput","createField","required","Textarea","buttonSend","Dialogs","authDisabled","container","content","contentUsers","dialogsPage","map","el","user","key","contentMessages","messages","messagesStyle","mes","formStyles","newMessage","addNewMessagesDialogs","newMessageBody","mapSateToProps","state","isAuth","auth","compose","connect","actions","addNewMessages","WrappedComponent","restProps"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,QAAU,yBAAyB,QAAU,yBAAyB,aAAe,8BAA8B,cAAgB,+BAA+B,gBAAkB,iCAAiC,WAAa,4BAA4B,UAAY,2BAA2B,WAAa,8B,sFCgB5VC,EARsB,SAACC,GAClC,IAAIC,EAAG,oBAAgBD,EAAME,IAC7B,OACI,yBAAKC,UAAWC,IAAMC,SACtB,kBAAC,IAAD,CAASC,GAAIL,GAAMD,EAAMO,S,iCCH3BC,EAAcC,YAAiB,IAwDhCC,EAAsBC,YAAoC,CAC3DC,KAAO,WADgBD,EAbuF,SAACX,GAC/G,OACI,0BAAMa,SAAUb,EAAMc,cAClB,yBAAKX,UAAWC,IAAMW,WACrBC,YAA0C,oBAAqB,iBAAkB,CAACC,IAAST,GAAcU,MAI1G,4BAAQf,UAAWC,IAAMe,YAAzB,YAWGC,EAhDuB,SAACpB,GACnC,IAAIA,EAAMqB,aAAgB,OAAO,kBAAC,IAAD,CAAUf,GAAG,WAS9C,OACI,yBAAKH,UAAWC,IAAMkB,WACtB,yBAAKnB,UAAWC,IAAMmB,SAClB,yBAAKpB,UAAWC,IAAMoB,cACjBxB,EAAMyB,YAAYlB,MAAMmB,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAOpB,MAAOoB,EAAGC,KAAM1B,GAAIyB,EAAGzB,GAAI2B,IAAKF,EAAGzB,SAEjF,yBAAKC,UAAWC,IAAM0B,iBACjB9B,EAAMyB,YAAYM,SAASL,KAAI,SAAAC,GAAE,OAAI,yBAAKxB,UAAWC,IAAM4B,cAAeH,IAAKF,EAAGzB,IAAKyB,EAAGM,UAG/F,yBAAK9B,UAAWC,IAAM8B,YAClB,kBAACxB,EAAD,CAAqBG,SAjBb,SAACsB,GAEjBnC,EAAMoC,sBAAsBD,EAAWE,gBACvCF,EAAWE,eAAe,S,gBCxB9BC,EAAiB,SAACC,GAAD,MAA0B,CAACC,OAAQD,EAAME,KAAKD,S,oBCSpDE,sBACXC,aATmB,SAACJ,GACpB,MAAO,CACHd,YAAac,EAAMd,YACnBJ,aAAckB,EAAME,KAAKD,UAOzB,CAACJ,sBAAwBQ,IAAQC,kBDPlC,SAA+BC,GAUlC,OAJqCH,YAGnBL,EAHmBK,EALwC,SAAC3C,GAAW,IAChFwC,EAAwBxC,EAAxBwC,OAAWO,EADoE,YACvD/C,EADuD,YAEpF,OAAKwC,EACE,kBAACM,EAAqBC,GADT,kBAAC,IAAD,CAAUzC,GAAG,gBCE1BoC,CAIbtB","file":"static/js/5.562d890e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__2DA5T\",\"content\":\"Dialogs_content__lDiUu\",\"usersBG\":\"Dialogs_usersBG__LXPR3\",\"contentUsers\":\"Dialogs_contentUsers__1zY_7\",\"messagesStyle\":\"Dialogs_messagesStyle__330fG\",\"contentMessages\":\"Dialogs_contentMessages__Q86Qf\",\"formStyles\":\"Dialogs_formStyles__2HVj9\",\"formInput\":\"Dialogs_formInput__1XQaI\",\"buttonSend\":\"Dialogs_buttonSend__2adR4\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport style from \"../Dialogs.module.css\"\r\n\r\ntype UsersType = {\r\n    id: number\r\n    users : string\r\n}\r\n\r\n const Users : React.FC<UsersType> = (props) => {\r\n    let url = `/messages/${props.id}`\r\n    return (\r\n        <div className={style.usersBG}>\r\n        <NavLink to={url}>{props.users}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default Users","import React from 'react'\r\nimport style from \"./Dialogs.module.css\";\r\nimport Users from \"./Users/Users\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {initialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nconst maxLength90 = maxLengthCreator(90)\r\n\r\ntype PropsType = {\r\n    authDisabled : boolean\r\n    dialogsPage:initialStateType\r\n    addNewMessagesDialogs : ( message: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody : string\r\n}\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\n\r\n\r\nconst Dialogs : React.FC<PropsType> = (props) => {\r\n    if(!props.authDisabled) { return <Redirect to=\"/login\" />}\r\n\r\n\r\n    let addNewMessage = (newMessage : NewMessageFormValuesType) =>{\r\n\r\n        props.addNewMessagesDialogs(newMessage.newMessageBody);\r\n        newMessage.newMessageBody=\"\"\r\n    }\r\n\r\n    return (\r\n        <div className={style.container}>\r\n        <div className={style.content}>\r\n            <div className={style.contentUsers}>\r\n                {props.dialogsPage.users.map(el => <Users users={el.user} id={el.id} key={el.id}/>)}\r\n            </div>\r\n            <div className={style.contentMessages}>\r\n                {props.dialogsPage.messages.map(el => <div className={style.messagesStyle} key={el.id}>{el.mes}</div>)}\r\n            </div>\r\n        </div>\r\n            <div className={style.formStyles}>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype DialogsPropsType = {}\r\n\r\nlet AddMessageForm : React.FC<InjectedFormProps<NewMessageFormValuesType, DialogsPropsType> & DialogsPropsType> = (props) =>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit} >\r\n            <div className={style.formInput}>\r\n            {createField<NewMessageFormValuesKeysType>(\"Enter you message\", \"newMessageBody\", [required,maxLength90], Textarea)}\r\n            </div>\r\n\r\n\r\n            <button className={style.buttonSend}>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet  AddMessageFormRedux = reduxForm<NewMessageFormValuesType>({\r\n    form : \"message\"\r\n})(AddMessageForm)\r\n\r\n\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n//HOC\r\n\r\nlet mapSateToProps = (state: AppStateType) => ({isAuth: state.auth.isAuth})\r\ntype MapSateToPropsType = { isAuth: boolean }\r\ntype MapDispatchToProps = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapSateToPropsType & MapDispatchToProps> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n        return <WrappedComponent {...restProps as WCP} />\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect<MapSateToPropsType,\r\n        MapDispatchToProps,\r\n        WCP,\r\n        AppStateType>(mapSateToProps)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n\r\n\r\n","import Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\n\r\nlet mapStateTopProps = (state : AppStateType)=>{\r\n    return {\r\n        dialogsPage :state.dialogsPage,\r\n        authDisabled :state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateTopProps,\r\n        {addNewMessagesDialogs : actions.addNewMessages}),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}