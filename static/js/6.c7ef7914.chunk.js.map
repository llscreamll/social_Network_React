{"version":3,"sources":["redux/users-selectors.ts","../node_modules/reselect/es/index.js","components/Login/LoginReduxForm.tsx","components/Login/Login.tsx"],"names":["getUsers","createSelector","state","usersPage","users","filter","el","getPageSize","pageSize","getTotalUserCount","totalUserCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getIsAuth","auth","isAuth","getUsersFilter","getCaptchaUrl","urlCaptcha","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","length","i","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","memoize","_len","arguments","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","apply","undefined","concat","selector","params","push","resetRecomputations","createSelectorCreator","func","lastArgs","lastResult","maxLength20","maxLengthCreator","LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","onSubmit","createField","required","Input","type","className","style","formSummaryError","src","alt","testAccount","testValues","Login","useSelector","dispatch","useDispatch","to","loginForm","formData","LoginEntrance","email","password","rememberMe","captcha"],"mappings":"0GAAA,+TAMaA,EAAWC,aAHC,SAACC,GACtB,OAAOA,EAAMC,UAAUC,SAE+B,SAACA,GACzD,OAASA,EAAMC,QAAO,SAAAC,GAAE,OAAI,QAEjBC,EAAc,SAACL,GACxB,OAAOA,EAAMC,UAAUK,UAGdC,EAAoB,SAACP,GAC9B,OAAOA,EAAMC,UAAUO,gBAEdC,EAAiB,SAACT,GAC3B,OAAOA,EAAMC,UAAUS,aAEdC,EAAgB,SAACX,GAC1B,OAAOA,EAAMC,UAAUW,YAEdC,EAAyB,SAACb,GACnC,OAAOA,EAAMC,UAAUa,qBAEbC,EAAY,SAACf,GACvB,OAAOA,EAAMgB,KAAKC,QAGTC,EAAgB,SAAClB,GAC1B,OAAOA,EAAMC,UAAUE,QAGdgB,EAAgB,SAACnB,GAC1B,OAAQA,EAAMgB,KAAKI,a,iCClCvB,SAASC,EAAqBC,EAAGC,GAC/B,OAAOD,IAAMC,EAGf,SAASC,EAA2BC,EAAeC,EAAMC,GACvD,GAAa,OAATD,GAA0B,OAATC,GAAiBD,EAAKE,SAAWD,EAAKC,OACzD,OAAO,EAKT,IADA,IAAIA,EAASF,EAAKE,OACTC,EAAI,EAAGA,EAAID,EAAQC,IAC1B,IAAKJ,EAAcC,EAAKG,GAAIF,EAAKE,IAC/B,OAAO,EAIX,OAAO,EAoBT,SAASC,EAAgBC,GACvB,IAAIC,EAAeC,MAAMC,QAAQH,EAAM,IAAMA,EAAM,GAAKA,EAExD,IAAKC,EAAaG,OAAM,SAAUC,GAChC,MAAsB,oBAARA,KACZ,CACF,IAAIC,EAAkBL,EAAaM,KAAI,SAAUF,GAC/C,cAAcA,KACbG,KAAK,MACR,MAAM,IAAIC,MAAM,wGAAgHH,EAAkB,KAGpJ,OAAOL,EAjDT,kCAkGO,IAAIjC,EA9CJ,SAA+B0C,GACpC,IAAK,IAAIC,EAAOC,UAAUf,OAAQgB,EAAiBX,MAAMS,EAAO,EAAIA,EAAO,EAAI,GAAIG,EAAO,EAAGA,EAAOH,EAAMG,IACxGD,EAAeC,EAAO,GAAKF,UAAUE,GAGvC,OAAO,WACL,IAAK,IAAIC,EAAQH,UAAUf,OAAQG,EAAQE,MAAMa,GAAQC,EAAQ,EAAGA,EAAQD,EAAOC,IACjFhB,EAAMgB,GAASJ,UAAUI,GAG3B,IAAIC,EAAiB,EACjBC,EAAalB,EAAMmB,MACnBlB,EAAeF,EAAgBC,GAE/BoB,EAAqBV,EAAQW,WAAMC,EAAW,CAAC,WAGjD,OAFAL,IAEOC,EAAWG,MAAM,KAAMT,aAC7BW,OAAOV,IAGNW,EAAWd,GAAQ,WAIrB,IAHA,IAAIe,EAAS,GACT5B,EAASI,EAAaJ,OAEjBC,EAAI,EAAGA,EAAID,EAAQC,IAE1B2B,EAAOC,KAAKzB,EAAaH,GAAGuB,MAAM,KAAMT,YAI1C,OAAOQ,EAAmBC,MAAM,KAAMI,MAWxC,OARAD,EAASN,WAAaA,EACtBM,EAASvB,aAAeA,EACxBuB,EAASP,eAAiB,WACxB,OAAOA,GAETO,EAASG,oBAAsB,WAC7B,OAAOV,EAAiB,GAEnBO,GAIiBI,EA9ErB,SAAwBC,GAC7B,IAAInC,EAAgBkB,UAAUf,OAAS,QAAsByB,IAAjBV,UAAU,GAAmBA,UAAU,GAAKtB,EAEpFwC,EAAW,KACXC,EAAa,KAEjB,OAAO,WAOL,OANKtC,EAA2BC,EAAeoC,EAAUlB,aAEvDmB,EAAaF,EAAKR,MAAM,KAAMT,YAGhCkB,EAAWlB,UACJmB,O,wICdLC,EAAcC,YAAiB,IAoCtBC,EAFMC,YAAmD,CAACC,KAAM,SAA1DD,EAjCsF,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAC9H,OACK,0BAAMC,SAAUH,GACb,6BACKI,YAAqC,QAAS,QAAS,CAACC,KAAWC,KACnEF,YAAqC,WAAY,WAAY,CAACC,IAAUV,GAAcW,IAAO,CAACC,KAAM,aACpGH,iBAAqCnB,EAAW,aAAc,GAAIqB,IAAO,CAACC,KAAM,YAAa,gBAEjGN,EACG,yBAAKO,UAAWC,IAAMC,kBAAmBT,GACvC,GACU,OAAfC,EACG,6BACI,yBAAKS,IAAKT,EAAYU,IAAI,KACzBR,YAAqC,GAAI,UAAW,GAAIE,MAG7D,GACJ,6BACI,0CAGH,yBAAKE,UAAWC,IAAMI,aAClB,8CACA,yBAAKL,UAAWC,IAAMK,YACtB,uCAAY,oDAAZ,KACA,yCAAc,sCAAd,WCPFC,UAtBoB,WAC/B,IAAIlE,EAASmE,YAAYrE,KACrBuD,EAAac,YAAYjE,KAEzBkE,EAAWC,cAKf,OAAIrE,EACO,kBAAC,IAAD,CAAUsE,GAAI,aAGrB,yBAAKX,UAAWC,IAAMW,WAClB,qCACA,kBAAC,EAAD,CAAgBjB,SATP,SAACkB,GACdJ,EAASK,YAAcD,EAASE,MAAOF,EAASG,SAAUH,EAASI,WAAYJ,EAASK,WASpExB,WAAYA","file":"static/js/6.c7ef7914.chunk.js","sourcesContent":["import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state : AppStateType) =>{\r\n    return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector( getUsersSelector, (users) =>{\r\n  return   users.filter(el => true)\r\n})\r\nexport const getPageSize = (state : AppStateType) =>{\r\n    return state.usersPage.pageSize;\r\n\r\n};\r\nexport const getTotalUserCount = (state : AppStateType) =>{\r\n    return state.usersPage.totalUserCount;\r\n};\r\nexport const getCurrentPage = (state : AppStateType) =>{\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsFetching = (state : AppStateType) =>{\r\n    return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state : AppStateType) =>{\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport  const getIsAuth = (state : AppStateType) =>{\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const getUsersFilter =(state : AppStateType) =>{\r\n    return state.usersPage.filter\r\n}\r\n\r\nexport const getCaptchaUrl = (state :AppStateType )=> {\r\n    return  state.auth.urlCaptcha\r\n}\r\n\r\n\r\n\r\n","function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nexport var createSelector = createSelectorCreator(defaultMemoize);\n\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","import React from 'react';\r\nimport style from \"../Common/FormsControls/FormsControlsClass.module.css\"\r\nimport {createField, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {GetStringKeys} from \"../../types/types\";\r\n\r\n\r\ntype LoginFormsOwnProps = {\r\n    captchaUrl?: string | null\r\n}\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string | null\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\nconst maxLength20 = maxLengthCreator(20)\r\nlet LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormsOwnProps> & LoginFormsOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n         <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n                {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required, maxLength20], Input, {type: \"password\"})}\r\n                {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n            </div>\r\n            {error ?\r\n                <div className={style.formSummaryError}>{error}</div>\r\n                : \"\"}\r\n            {captchaUrl !== null ?\r\n                <div>\r\n                    <img src={captchaUrl} alt=\"\"/>\r\n                    {createField<LoginFormValuesTypeKeys>(\"\", \"captcha\", [], Input)}\r\n                </div>\r\n                :\r\n                \"\"}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n\r\n             <div className={style.testAccount}>\r\n                 <h3>Test account: </h3>\r\n                 <div className={style.testValues}>\r\n                 <h4>Email : <span>free@samuraijs.com</span> </h4>\r\n                 <h4>Password: <span>free</span> </h4>\r\n                 </div>\r\n             </div>\r\n        </form>\r\n\r\n    )\r\n}\r\nlet LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormsOwnProps>({form: \"login\"})(LoginForm)\r\n\r\nexport default LoginReduxForm;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport style from \"../Common/FormsControls/FormsControlsClass.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginEntrance} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getCaptchaUrl, getIsAuth} from \"../../redux/users-selectors\";\r\nimport LoginReduxForm from \"./LoginReduxForm\";\r\n\r\n\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string | null\r\n}\r\n\r\ntype LoginType = {}\r\nconst Login: React.FC<LoginType> = () => {\r\n    let isAuth = useSelector(getIsAuth)\r\n    let captchaUrl = useSelector(getCaptchaUrl)\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(LoginEntrance(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div className={style.loginForm}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}\r\n                            captchaUrl={captchaUrl}\r\n            />\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Login;\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}