{"version":3,"sources":["redux/users-selectors.ts","components/Login/LoginFormik.tsx","components/Login/Login.tsx"],"names":["getUsers","createSelector","state","usersPage","users","filter","el","getPageSize","pageSize","getTotalUserCount","totalUserCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getIsAuth","auth","isAuth","getUsersFilter","getCaptchaUrl","urlCaptcha","LoginFormik","onSubmit","captchaUrl","error","useSelector","getFormData","formData","Container","component","maxWidth","CssBaseline","Typography","color","variant","initialValues","email","password","checkbox","validate","values","errors","test","setSubmitting","setTimeout","submitForm","isSubmitting","TextField","name","type","label","helperText","Checkbox","LinearProgress","src","alt","Button","disabled","onClick","Login","dispatch","useDispatch","to","Grid","style","textAlign","height","container","direction","justify","alignItems","item","xs","LoginEntrance","captcha"],"mappings":"0GAAA,+TAMaA,EAAWC,aAHC,SAACC,GACtB,OAAOA,EAAMC,UAAUC,SAE+B,SAACA,GACzD,OAASA,EAAMC,QAAO,SAAAC,GAAE,OAAI,QAEjBC,EAAc,SAACL,GACxB,OAAOA,EAAMC,UAAUK,UAGdC,EAAoB,SAACP,GAC9B,OAAOA,EAAMC,UAAUO,gBAEdC,EAAiB,SAACT,GAC3B,OAAOA,EAAMC,UAAUS,aAEdC,EAAgB,SAACX,GAC1B,OAAOA,EAAMC,UAAUW,YAEdC,EAAyB,SAACb,GACnC,OAAOA,EAAMC,UAAUa,qBAEbC,EAAY,SAACf,GACvB,OAAOA,EAAMgB,KAAKC,QAGTC,EAAgB,SAAClB,GAC1B,OAAOA,EAAMC,UAAUE,QAGdgB,EAAgB,SAACnB,GAC1B,OAAQA,EAAMgB,KAAKI,a,uLCmFRC,EA9F6B,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,WAE9CC,EAAQC,aAAY,SAACzB,GAAD,OAAyBA,EAAMgB,KAAKQ,SAExDE,EAAc,SAACC,GACjBL,EAASK,IAEb,OACI,gBAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACjC,gBAACC,EAAA,EAAD,MACA,gBAACC,EAAA,EAAD,CAAYC,MAAO,UAAWJ,UAAU,KAAKK,QAAQ,MAArD,kCAGCV,EAAQ,gBAACQ,EAAA,EAAD,CAAYC,MAAO,aAAcT,GAAsB,GAEhE,gBAAC,IAAD,CACIW,cAAe,CACXC,MAAO,qBACPC,SAAU,OACVC,UAAU,GAEdC,SAAU,SAAAC,GACN,IAAMC,EAA0B,GAQhC,OAPKD,EAAOJ,MAGP,4CAA4CM,KAAKF,EAAOJ,SAEzDK,EAAOL,MAAQ,yBAJfK,EAAOL,MAAQ,WAMZK,GAEXnB,SAAU,SAACkB,EAAD,GAA8B,IAApBG,EAAmB,EAAnBA,cAChBC,YAAW,WACPD,GAAc,GACdjB,EAAYc,KAEb,QAGN,gBAAEK,EAAF,EAAEA,WAAYC,EAAd,EAAcA,aAAd,OACG,gBAAC,IAAD,KACI,gBAAC,IAAD,CACIjB,UAAWkB,IACXC,KAAK,QACLC,KAAK,QACLC,MAAM,QACNC,WAAW,uBAEf,2BACA,gBAAC,IAAD,CACItB,UAAWkB,IACXE,KAAK,WACLC,MAAM,WACNF,KAAK,WACLG,WAAW,0BAEf,2BAEA,gBAACnB,EAAA,EAAD,CAAYE,QAAS,SAArB,0DACA,gBAAC,IAAD,CACIL,UAAWuB,IACXJ,KAAK,aACLC,KAAK,aAERH,GAAgB,gBAACO,EAAA,EAAD,MACjB,2BACC9B,GACD,gCACI,2BACA,uBAAK+B,IAAK/B,EAAsBgC,IAAI,YAEpC,gBAAC,IAAD,CACI1B,UAAWkB,IACXC,KAAK,UACLC,KAAK,OACLC,MAAM,UAGd,gBAACM,EAAA,EAAD,CACItB,QAAQ,YACRD,MAAM,UACNwB,SAAUX,EACVY,QAASb,GAJb,wCCxDTc,UA9BoB,WAC/B,IAAI1C,EAASQ,YAAYV,KACrBQ,EAAaE,YAAYN,KAEzByC,EAAWC,cAKf,OAAI5C,EACO,kBAAC,IAAD,CAAU6C,GAAI,aAGrB,kBAACC,EAAA,EAAD,CACIC,MAAO,CAACC,UAAU,SAASC,OAAO,SAClCC,WAAS,EACPC,UAAU,SACVC,QAAQ,SACRC,WAAW,UACb,kBAACP,EAAA,EAAD,CAAMQ,MAAI,EAACC,GAAI,IACX,kBAAC,EAAD,CACIjD,WAAYA,EACZD,SAhBC,SAACK,GACdiC,EAASa,YAAc9C,EAASS,MAAOT,EAASU,SAAUV,EAASW,SAAUX,EAAS+C","file":"static/js/9.3695fe94.chunk.js","sourcesContent":["import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state : AppStateType) =>{\r\n    return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector( getUsersSelector, (users) =>{\r\n  return   users.filter(el => true)\r\n})\r\nexport const getPageSize = (state : AppStateType) =>{\r\n    return state.usersPage.pageSize;\r\n\r\n};\r\nexport const getTotalUserCount = (state : AppStateType) =>{\r\n    return state.usersPage.totalUserCount;\r\n};\r\nexport const getCurrentPage = (state : AppStateType) =>{\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsFetching = (state : AppStateType) =>{\r\n    return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state : AppStateType) =>{\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport  const getIsAuth = (state : AppStateType) =>{\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const getUsersFilter =(state : AppStateType) =>{\r\n    return state.usersPage.filter\r\n}\r\n\r\nexport const getCaptchaUrl = (state :AppStateType )=> {\r\n    return  state.auth.urlCaptcha\r\n}\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport {Field, Form, Formik} from 'formik';\r\nimport {Button, LinearProgress, Typography} from '@material-ui/core';\r\nimport {TextField} from 'formik-material-ui';\r\nimport Checkbox from '@material-ui/core/Checkbox/Checkbox';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\ninterface Values {\r\n    email: string\r\n    password: string\r\n    checkbox: boolean\r\n    captchaUrl?: string | null\r\n\r\n}\r\n\r\ntype LoginMUIType = {\r\n    onSubmit: (formData: Values) => any\r\n    captchaUrl?: string | null\r\n}\r\n\r\nconst LoginFormik: React.FC<LoginMUIType> = ({onSubmit, captchaUrl}): React.ReactElement => {\r\n\r\n    const error = useSelector((state: AppStateType) => state.auth.error)\r\n\r\n    const getFormData = (formData: Values) => {\r\n        onSubmit(formData)\r\n    }\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <Typography color={\"primary\"} component=\"h1\" variant=\"h5\">\r\n                Войти\r\n            </Typography>\r\n            {error ? <Typography color={\"secondary\"}>{error}</Typography> : \"\"}\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    email: 'free@samuraijs.com',\r\n                    password: 'free',\r\n                    checkbox: false\r\n                }}\r\n                validate={values => {\r\n                    const errors: Partial<Values> = {};\r\n                    if (!values.email) {\r\n                        errors.email = 'Required';\r\n                    } else if (\r\n                        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n                    ) {\r\n                        errors.email = 'Invalid email address';\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    setTimeout(() => {\r\n                        setSubmitting(false);\r\n                        getFormData(values)\r\n\r\n                    }, 500);\r\n                }}\r\n            >\r\n                {({submitForm, isSubmitting}) => (\r\n                    <Form>\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            helperText=\"Please Enter Email\"\r\n                        />\r\n                        <br/>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            helperText=\"Please Enter Password\"\r\n                        />\r\n                        <br/>\r\n\r\n                        <Typography variant={\"body2\"}>Запомнить</Typography>\r\n                        <Field\r\n                            component={Checkbox}\r\n                            name=\"rememberMe\"\r\n                            type='checkbox'\r\n                        />\r\n                        {isSubmitting && <LinearProgress/>}\r\n                        <br/>\r\n                        {captchaUrl &&\r\n                        <>\r\n                            <br/>\r\n                            <img src={captchaUrl as string} alt=\"captcha\"/>\r\n\r\n                            <Field\r\n                                component={TextField}\r\n                                name=\"captcha\"\r\n                                type=\"text\"\r\n                                label=\"text\"\r\n                            />\r\n                        </>}\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={isSubmitting}\r\n                            onClick={submitForm}\r\n                        >\r\n                            Войти\r\n                        </Button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default LoginFormik","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginEntrance} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getCaptchaUrl, getIsAuth} from \"../../redux/users-selectors\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport LoginFormik from './LoginFormik';\r\n\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    checkbox: boolean\r\n    captcha?: string | null\r\n}\r\n\r\ntype LoginType = {}\r\nconst Login: React.FC<LoginType> = () => {\r\n    let isAuth = useSelector(getIsAuth)\r\n    let captchaUrl = useSelector(getCaptchaUrl)\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(LoginEntrance(formData.email, formData.password, formData.checkbox, formData.captcha))\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <Grid\r\n            style={{textAlign:'center',height:'100vh'}}\r\n            container\r\n              direction=\"column\"\r\n              justify=\"center\"\r\n              alignItems=\"center\">\r\n            <Grid item xs={12}>\r\n                <LoginFormik\r\n                    captchaUrl={captchaUrl}\r\n                    onSubmit={onSubmit}\r\n                />\r\n            </Grid>\r\n\r\n        </Grid>\r\n\r\n    )\r\n}\r\nexport default Login;\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}