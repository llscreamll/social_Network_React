{"version":3,"sources":["components/Login/Login.tsx"],"names":["maxLength20","maxLengthCreator","LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","onSubmit","createField","required","Input","type","undefined","className","style","formSummaryError","src","alt","connect","state","isAuth","auth","urlCaptcha","LoginEntrance","props","to","loginForm","formData","email","password","rememberMe","captcha"],"mappings":"0GAAA,6FAmCMA,EAAcC,YAAiB,IA+BjCC,EAAiBC,YAAmD,CAACC,KAAM,SAA1DD,EA7BsF,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAC9H,OAII,0BAAMC,SAAUH,GACZ,6BACKI,YAAqC,4BAA6B,QAAS,CAACC,KAAWC,KACvFF,YAAqC,iBAAkB,WAAY,CAACC,IAAUV,GAAcW,IAAO,CAACC,KAAM,aAC1GH,iBAAqCI,EAAW,aAAc,GAAIF,IAAO,CAACC,KAAM,YAAa,gBAGjGN,EACG,yBAAKQ,UAAWC,IAAMC,kBAAmBV,GACvC,GACU,OAAfC,EACG,6BACI,yBAAKU,IAAKV,EAAYW,IAAI,KACzBT,YAAqC,GAAI,UAAW,GAAIE,MAG7D,GACJ,6BACI,8CAsCDQ,uBANS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBd,WAAYa,EAAME,KAAKC,cAGS,CAACC,mBAA1BL,EAxBmD,SAACM,GAI/D,OAAIA,EAAMJ,OACC,kBAAC,IAAD,CAAUK,GAAI,aAGrB,yBAAKZ,UAAWC,IAAMY,WAClB,qCACA,kBAACzB,EAAD,CAAgBM,SATP,SAACoB,GACdH,EAAMD,cAAcI,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAQ7CzB,WAAYkB,EAAMlB","file":"static/js/6.c769a83b.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from \"../Common/FormsControls/FormsControlsClass.module.css\"\r\nimport {connect} from \"react-redux\";\r\nimport {LoginEntrance} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {createField, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {GetStringKeys} from \"../../types/types\";\r\n\r\n\r\n\r\n\r\ntype LoginFormsOwnProps = {\r\n    captchaUrl?: string | null\r\n}\r\ntype mapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchPropsType = {\r\n    LoginEntrance: (email: string, password: string, rememberMe: boolean, captcha?: string | null | undefined) => void\r\n}\r\n\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string | null\r\n}\r\n// type LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\n\r\nconst maxLength20 = maxLengthCreator(20)\r\n\r\nlet LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormsOwnProps> & LoginFormsOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n\r\n\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {createField<LoginFormValuesTypeKeys>(\"Email: free@samuraijs.com\", \"email\", [required], Input)}\r\n                {createField<LoginFormValuesTypeKeys>(\"Password: free\", \"password\", [required, maxLength20], Input, {type: \"password\"})}\r\n                {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n            </div>\r\n\r\n            {error ?\r\n                <div className={style.formSummaryError}>{error}</div>\r\n                : \"\"}\r\n            {captchaUrl !== null ?\r\n                <div>\r\n                    <img src={captchaUrl} alt=\"\"/>\r\n                    {createField<LoginFormValuesTypeKeys>(\"\", \"captcha\", [], Input)}\r\n                </div>\r\n                :\r\n                \"\"}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\nlet LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormsOwnProps>({form: \"login\"})(LoginForm)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Login: React.FC<mapStatePropsType & mapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.LoginEntrance(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div className={style.loginForm}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.urlCaptcha\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {LoginEntrance})(Login)\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}