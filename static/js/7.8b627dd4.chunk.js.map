{"version":3,"sources":["redux/users-selectors.ts","components/Users/Users.module.css","components/Common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchFrom.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"names":["getUsers","createSelector","state","usersPage","users","filter","el","getPageSize","pageSize","getTotalUserCount","totalUserCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getIsAuth","auth","isAuth","getUsersFilter","getCaptchaUrl","urlCaptcha","module","exports","Paginator","onPageChanged","pagesCount","Math","ceil","Pagination","size","siblingCount","showFirstButton","showLastButton","count","variant","color","onChange","e","value","useStyles","makeStyles","root","width","textAlign","media","height","User","user","followingProgress","followUsers","unFollowUsers","classes","Card","className","to","id","CardActionArea","CardMedia","image","photos","small","avatar","title","CardContent","Typography","gutterBottom","component","name","status","CardActions","style","justifyContent","followed","Button","disabled","some","onClick","usersSearchFormValidate","values","UsersSearchForm","React","memo","props","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","type","placeholder","as","Users","dispatch","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","getUsersThunk","query","push","pathname","UserId","follow","unFollow","usersPages","pageNumber","map","key","UsersContainer","pageUsers"],"mappings":"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","file":"static/js/7.8b627dd4.chunk.js","sourcesContent":["import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state : AppStateType) =>{\r\n    return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector( getUsersSelector, (users) =>{\r\n  return   users.filter(el => true)\r\n})\r\nexport const getPageSize = (state : AppStateType) =>{\r\n    return state.usersPage.pageSize;\r\n\r\n};\r\nexport const getTotalUserCount = (state : AppStateType) =>{\r\n    return state.usersPage.totalUserCount;\r\n};\r\nexport const getCurrentPage = (state : AppStateType) =>{\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsFetching = (state : AppStateType) =>{\r\n    return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state : AppStateType) =>{\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport  const getIsAuth = (state : AppStateType) =>{\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const getUsersFilter =(state : AppStateType) =>{\r\n    return state.usersPage.filter\r\n}\r\n\r\nexport const getCaptchaUrl = (state :AppStateType )=> {\r\n    return  state.auth.urlCaptcha\r\n}\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPage\":\"Users_usersPage__12vKJ\",\"users\":\"Users_users__3Cj-e\",\"statusPage\":\"Users_statusPage__1lxlN\",\"usersBorder\":\"Users_usersBorder__23uqw\"};","import React from 'react';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n\r\ntype PropsType = {\r\n    totalUserCount: number\r\n    pageSize: number\r\n    onPageChanged: (pageNumber: number) => void\r\n\r\n}\r\nlet Paginator: React.FC<PropsType> = ({\r\n                                          totalUserCount,\r\n                                          pageSize,\r\n                                          onPageChanged,\r\n                                      }) => {\r\n\r\n    let pagesCount = Math.ceil(totalUserCount / pageSize);\r\n\r\n    return (\r\n\r\n        <Pagination size=\"medium\" siblingCount={4} showFirstButton showLastButton count={pagesCount}\r\n                    variant=\"outlined\" color=\"primary\" onChange={(e, value) => onPageChanged(value)}/>\r\n\r\n    )\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport avatar from \"../images/avatar.jpg\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 200,\r\n        textAlign:'center',\r\n    },\r\n    media: {\r\n        height: 180,\r\n    },\r\n\r\n\r\n});\r\ntype PropsType = {\r\n    user: UserType\r\n    isAuth: boolean\r\n    followingProgress: Array<number>\r\n    followUsers: (userId: number) => void\r\n    unFollowUsers: (userId: number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({user, followingProgress, followUsers, unFollowUsers, isAuth}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card className={classes.root}>\r\n                <NavLink to={`/profile/${user.id}`}>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                            className={classes.media}\r\n                            image={user.photos.small != null ? user.photos.small : avatar}\r\n                            title=\"Contemplative Reptile\"\r\n                        />\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"h6\">\r\n                                {user.name}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                {user.status}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </NavLink>\r\n                <CardActions style={{justifyContent:'center'}}>\r\n                    {isAuth ? <div>\r\n                            {user.followed ?\r\n                                <Button size=\"small\" color=\"secondary\" variant={\"outlined\"} disabled={followingProgress.some(id => id === user.id)}\r\n                                        onClick={\r\n                                            () => {\r\n                                                unFollowUsers(user.id)\r\n                                            }\r\n                                        }>Отписаться</Button> :\r\n                                <Button size=\"small\" color={\"primary\"} variant={\"outlined\"} disabled={followingProgress.some(id => id === user.id)} onClick={\r\n                                    () => {\r\n                                        followUsers(user.id)\r\n                                    }\r\n                                }>Подписаться</Button>}\r\n                        </div>\r\n                        : <button disabled={true}>Подписаться</button>}\r\n                </CardActions>\r\n            </Card>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default User;","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectors\";\r\n\r\nlet usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype propsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\nexport const UsersSearchForm: React.FC<propsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n        const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n            const filter: FilterType = {\r\n                term: values.term,\r\n                friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n            }\r\n            props.onFilterChanged(filter)\r\n            setSubmitting(false)\r\n        }\r\n        return (\r\n            <div>\r\n                <Formik\r\n                    enableReinitialize={true}\r\n                    initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                    validate={usersSearchFormValidate}\r\n                    onSubmit={submit}\r\n                >\r\n                    {({isSubmitting}) => (\r\n                        <Form>\r\n                            <Field type=\"text\" name=\"term\" placeholder=\"User name\"/>\r\n                            <Field name=\"friend\" as=\"select\">\r\n                                <option value=\"null\">All</option>\r\n                                <option value=\"true\">Only followed</option>\r\n                                <option value=\"false\">Only not followed</option>\r\n                            </Field>\r\n                            <button type=\"submit\" disabled={isSubmitting}>\r\n                                Find\r\n                            </button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n)","import React, {FC, useEffect} from 'react';\r\nimport Paginator from \"../Common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport style from \"./Users.module.css\"\r\nimport {UsersSearchForm} from \"./UsersSearchFrom\";\r\nimport {FilterType, follow, getUsersThunk, unFollow} from \"../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsAuth,\r\n    getPageSize,\r\n    getTotalUserCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport * as queryString from \"querystring\";\r\n\r\n\r\ntype queryParamsType = { term?: string, page?: string, friend?: string };\r\nexport let Users: FC = (): React.ReactElement => {\r\n\r\n    const totalUserCount = useSelector(getTotalUserCount)\r\n    const users = useSelector(getUsers)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingProgress = useSelector(getFollowingInProgress)\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as queryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n        }\r\n\r\n        dispatch(getUsersThunk(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: queryParamsType = {};\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: \"/users\",\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(getUsersThunk(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsersThunk(1, pageSize, filter))\r\n    }\r\n\r\n    const followUsers = (UserId: number) => {\r\n        dispatch(follow(UserId))\r\n    }\r\n    const unFollowUsers = (UserId: number) => {\r\n        dispatch(unFollow(UserId))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            </div>\r\n\r\n            <div className={style.usersPages}>\r\n\r\n                <Paginator totalUserCount={totalUserCount}\r\n                           pageSize={pageSize}\r\n                           onPageChanged={onPageChanged}\r\n                />\r\n\r\n                <div className={style.usersPage}>\r\n                    {\r\n                        users.map((el,id) => {\r\n                            return (\r\n                                <div className={style.users} key={`${id}_${el.name}`}>\r\n                                    <User user={el}\r\n                                          followingProgress={followingProgress}\r\n                                          isAuth={isAuth}\r\n                                          followUsers={followUsers}\r\n                                          unFollowUsers={unFollowUsers}\r\n                                          key={el.id}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>)\r\n}","import style from \"./Users.module.css\"\r\nimport React from \"react\";\r\nimport Preloader from \"../Common/Reloader\";\r\nimport {getIsFetching} from \"../../redux/users-selectors\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Users} from \"./Users\";\r\n\r\ntype UsersPageType ={\r\n}\r\nconst UsersContainer : React.FC<UsersPageType> = (props)=>{\r\n    let isFetching = useSelector(getIsFetching)\r\n    return(\r\n        <div className={style.pageUsers}>\r\n            {isFetching ? <Preloader/> : null}\r\n            <Users />\r\n        </div>\r\n    )\r\n}\r\nexport  default UsersContainer;\r\n\r\n\r\n"],"sourceRoot":""}