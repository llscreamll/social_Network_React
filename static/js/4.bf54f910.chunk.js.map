{"version":3,"sources":["redux/users-selectors.ts","components/Users/Users.module.css","components/Common/Paginator/Paginator.module.css","components/Common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchFrom.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"names":["getUsers","createSelector","state","usersPage","users","filter","el","getPageSize","pageSize","getTotalUserCount","totalUserCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getIsAuth","auth","isAuth","getUsersFilter","getCaptchaUrl","urlCaptcha","module","exports","Paginator","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","style","paginator","buttonLeft","buttonClick","onClick","p","map","selectedPage","pageNumber","key","e","buttonRight","User","user","followingProgress","followUsers","unFollowUsers","usersBorder","to","id","src","photos","small","avatar","alt","name","statusPage","status","followed","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","props","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","type","placeholder","as","value","Users","dispatch","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","getUsersThunk","query","pathname","UserId","follow","unFollow","usersPages","UsersContainer","pageUsers"],"mappings":"0GAAA,+TAMaA,EAAWC,aAHC,SAACC,GACtB,OAAOA,EAAMC,UAAUC,SAE+B,SAACA,GACzD,OAASA,EAAMC,QAAO,SAAAC,GAAE,OAAI,QAEjBC,EAAc,SAACL,GACxB,OAAOA,EAAMC,UAAUK,UAGdC,EAAoB,SAACP,GAC9B,OAAOA,EAAMC,UAAUO,gBAEdC,EAAiB,SAACT,GAC3B,OAAOA,EAAMC,UAAUS,aAEdC,EAAgB,SAACX,GAC1B,OAAOA,EAAMC,UAAUW,YAEdC,EAAyB,SAACb,GACnC,OAAOA,EAAMC,UAAUa,qBAEbC,EAAY,SAACf,GACvB,OAAOA,EAAMgB,KAAKC,QAGTC,EAAgB,SAAClB,GAC1B,OAAOA,EAAMC,UAAUE,QAGdgB,EAAgB,SAACnB,GAC1B,OAAQA,EAAMgB,KAAKI,a,oBCjCvBC,EAAOC,QAAU,CAAC,UAAY,yBAAyB,UAAY,yBAAyB,MAAQ,qBAAqB,WAAa,0BAA0B,YAAc,6B,oBCA9KD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,aAAe,gCAAgC,YAAc,+BAA+B,WAAa,8BAA8B,YAAc,iC,yICmD5OC,EAxC2B,SAAC,GAOvC,IAH8D,IAJtBf,EAIqB,EAJrBA,eACDF,EAGsB,EAHtBA,SACAI,EAEsB,EAFtBA,YACAc,EACsB,EADtBA,cACsB,IAAtBC,mBAAsB,MAAR,GAAQ,EACzDC,EAAaC,KAAKC,KAAKpB,EAAiBF,GACxCuB,EAAwB,GACnBC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAEf,IAAIE,EAAeL,KAAKC,KAAKF,EAAaD,GANmB,EAOrBQ,mBAAS,GAPY,mBAOxDC,EAPwD,KAOzCC,EAPyC,KAQzDC,GAAyBF,EAAgB,GAAKT,EAAc,EAC5DY,EAAyBH,EAAgBT,EAG7C,OACA,yBAAKa,UAAWC,IAAMC,WACbN,EAAgB,GACjB,4BAAQI,UAAS,UAAKC,IAAME,WAAX,YAAyBF,IAAMG,aAAeC,QAAS,WACpER,EAAiBD,EAAgB,KADrC,QAICL,EACI1B,QAAO,SAAAyC,GAAC,OAAIA,GAAKR,GAAyBQ,GAAKP,KAC/CQ,KAAI,SAACD,GACF,OAAO,0BAAMN,UAAW5B,IAAgBkC,EAAIL,IAAMO,aAAeP,IAAMQ,WAC1DC,IAAKJ,EACLD,QAAS,SAACM,GACNzB,EAAcoB,KACdA,MAExBZ,EAAeE,GAChB,4BAAQI,UAAS,UAAKC,IAAMW,YAAX,YAA0BX,IAAMG,aAAeC,QAAS,WACrER,EAAiBD,EAAgB,KADrC,U,0BCJGiB,EA3BiB,SAAC,GAA+D,IAA9DC,EAA6D,EAA7DA,KAAKC,EAAwD,EAAxDA,kBAAkBC,EAAsC,EAAtCA,YAAYC,EAA0B,EAA1BA,cAActC,EAAY,EAAZA,OAE/E,OACQ,yBAAKqB,UAAWC,IAAMiB,aAClB,kBAAC,IAAD,CAASC,GAAE,mBAAcL,EAAKM,KAC9B,yBAAKC,IAA0B,MAArBP,EAAKQ,OAAOC,MAAgBT,EAAKQ,OAAOC,MAAQC,IAAQC,IAAI,UAGtE,6BAAMX,EAAKY,MACX,yBAAK1B,UAAWC,IAAM0B,YAAab,EAAKc,QAEvCjD,EAAS,6BACLmC,EAAKe,SAAW,4BAAQC,SAAUf,EAAkBgB,MAAK,SAAAX,GAAE,OAAIA,IAAON,EAAKM,MAAKf,QACzE,WAAQY,EAAcH,EAAKM,MADlB,gEAGb,4BAAQU,SAAUf,EAAkBgB,MAAK,SAAAX,GAAE,OAAIA,IAAON,EAAKM,MAAMf,QAC7D,WAAOW,EAAYF,EAAKM,MAD5B,uEAKF,4BAAQU,UAAU,GAAlB,wE,SC5BlBE,EAA0B,SAACC,GAE3B,MADe,IAaNC,EAAuCC,IAAMC,MAAK,SAACC,GAE5D,IAAMxE,EAASyE,YAAY1D,KAUvB,OACI,6BACI,kBAAC,IAAD,CACI2D,oBAAoB,EACpBC,cAAe,CAACC,KAAM5E,EAAO4E,KAAMC,OAAQC,OAAO9E,EAAO6E,SACzDE,SAAUZ,EACVa,SAdG,SAACZ,EAAD,GAA4F,IAAxEa,EAAuE,EAAvEA,cACzBjF,EAAqB,CACvB4E,KAAMR,EAAOQ,KACbC,OAA0B,SAAlBT,EAAOS,OAAoB,KAAyB,SAAlBT,EAAOS,QAErDL,EAAMU,gBAAgBlF,GACtBiF,GAAc,MAUL,gBAAEE,EAAF,EAAEA,aAAF,OACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,OAAOvB,KAAK,OAAOwB,YAAY,cAC3C,kBAAC,IAAD,CAAOxB,KAAK,SAASyB,GAAG,UACpB,4BAAQC,MAAM,QAAd,OACA,4BAAQA,MAAM,QAAd,iBACA,4BAAQA,MAAM,SAAd,sBAEJ,4BAAQH,KAAK,SAASnB,SAAUkB,GAAhC,gB,0BCzBjBK,EAAuB,SAAChB,GAE/B,IAAMnE,EAAiBoE,YAAYrE,KAC7BL,EAAQ0E,YAAY9E,KACpBY,EAAckE,YAAYnE,KAC1BH,EAAWsE,YAAYvE,KACvBF,EAASyE,YAAY1D,KACrBmC,EAAoBuB,YAAY/D,KAChCI,EAAS2D,YAAY7D,KAErB6E,EAAWC,cACXC,EAAUC,cAKhBC,qBAAU,WACN,IAAMC,EAASC,QAAkBJ,EAAQK,SAASC,OAAOC,OAAO,IAE5DC,EAAa5F,EACb6F,EAAepG,EAMnB,OAJM8F,EAAOO,OAAMF,EAAaG,OAAOR,EAAOO,OAExCP,EAAOlB,OAAMwB,EAAY,eAAOA,EAAP,CAAqBxB,KAAMkB,EAAOlB,QAEzDkB,EAAOjB,QACX,IAAK,OACDuB,EAAY,eAAOA,EAAP,CAAqBvB,OAAQ,OACzC,MACJ,IAAK,QACDuB,EAAY,eAAOA,EAAP,CAAqBvB,QAAQ,IACzC,MACJ,IAAK,OACDuB,EAAY,eAAOA,EAAP,CAAqBvB,QAAQ,IAIjDY,EAASc,YAAcJ,EAAYhG,EAAUiG,MAC9C,IAEHP,qBAAU,WACN,IAAMW,EAAyB,GAC1BxG,EAAO4E,OAAM4B,EAAM5B,KAAO5E,EAAO4E,MACjB,OAAlB5E,EAAO6E,SAAiB2B,EAAM3B,OAASC,OAAO9E,EAAO6E,SACrC,IAAhBtE,IAAmBiG,EAAMH,KAAOvB,OAAOvE,IAE1CoF,EAAQ/D,KAAK,CACT6E,SAAW,SACXR,OAAQF,YAAsBS,OAEpC,CAACxG,EAAOO,IAEV,IAOM4C,EAAc,SAACuD,GACjBjB,EAASkB,YAAOD,KAEdtD,EAAe,SAACsD,GAClBjB,EAASmB,YAASF,KAGtB,OACI,oCACI,6BACI,kBAACrC,EAAD,CAAiBa,gBAdL,SAAClF,GACrByF,EAASc,YAAc,EAAGpG,EAAUH,QAgBhC,yBAAKmC,UAAWC,IAAMyE,YAClB,kBAAC,EAAD,CAAWtG,YAAaA,EACbF,eAAgBA,EAChBF,SAAUA,EACVkB,cAxBD,SAACuB,GACnB6C,EAASc,YAAc3D,EAAYzC,EAAUH,OAyBrC,yBAAKmC,UAAWC,IAAMtC,WAEdC,EAAM2C,KAAI,SAAAzC,GACN,OACI,yBAAKkC,UAAWC,IAAMrC,OAClB,kBAAC,EAAD,CAAMkD,KAAMhD,EACNiD,kBAAmBA,EACnBpC,OAAQA,EACRqC,YAAaA,EACbC,cAAeA,EACfP,IAAK5C,EAAGsD,aC9FlCuD,UATiC,SAACtC,GAC9C,IAAI/D,EAAagE,YAAYjE,KAC7B,OACI,yBAAK2B,UAAWC,IAAM2E,WACjBtG,EAAa,kBAAC,IAAD,MAAe,KAC7B,kBAAC,EAAD","file":"static/js/4.bf54f910.chunk.js","sourcesContent":["import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state : AppStateType) =>{\r\n    return state.usersPage.users;\r\n};\r\nexport const getUsers = createSelector( getUsersSelector, (users) =>{\r\n  return   users.filter(el => true)\r\n})\r\nexport const getPageSize = (state : AppStateType) =>{\r\n    return state.usersPage.pageSize;\r\n\r\n};\r\nexport const getTotalUserCount = (state : AppStateType) =>{\r\n    return state.usersPage.totalUserCount;\r\n};\r\nexport const getCurrentPage = (state : AppStateType) =>{\r\n    return state.usersPage.currentPage;\r\n};\r\nexport const getIsFetching = (state : AppStateType) =>{\r\n    return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state : AppStateType) =>{\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport  const getIsAuth = (state : AppStateType) =>{\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const getUsersFilter =(state : AppStateType) =>{\r\n    return state.usersPage.filter\r\n}\r\n\r\nexport const getCaptchaUrl = (state :AppStateType )=> {\r\n    return  state.auth.urlCaptcha\r\n}\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageUsers\":\"Users_pageUsers__39Agt\",\"usersPage\":\"Users_usersPage__12vKJ\",\"users\":\"Users_users__3Cj-e\",\"statusPage\":\"Users_statusPage__1lxlN\",\"usersBorder\":\"Users_usersBorder__23uqw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__21QvK\",\"pageNumber\":\"Paginator_pageNumber__3WhEz\",\"selectedPage\":\"Paginator_selectedPage__1Y4oU\",\"buttonClick\":\"Paginator_buttonClick__3Y8NQ\",\"buttonLeft\":\"Paginator_buttonLeft__hagBj\",\"buttonRight\":\"Paginator_buttonRight__2duI2\"};","import React, {useState} from 'react';\r\nimport style from \"./Paginator.module.css\"\r\n// import cn from \"classnames\";\r\n\r\ntype PropsType  = {\r\n    totalUserCount : number\r\n    pageSize: number\r\n    currentPage : number\r\n    onPageChanged : (pageNumber : number) => void\r\n    portionSize? : number\r\n}\r\n\r\n    let Paginator : React.FC<PropsType> = ({totalUserCount,\r\n                                           pageSize,\r\n                                           currentPage,\r\n                                           onPageChanged,\r\n                                           portionSize = 20}) => {\r\n    let pagesCount = Math.ceil(totalUserCount / pageSize);\r\n    let pages : Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return (\r\n    <div className={style.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button className={`${style.buttonLeft} ${style.buttonClick}`} onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={currentPage === p ? style.selectedPage : style.pageNumber}\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p);\r\n                                 }}>{p}</span>\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button className={`${style.buttonRight} ${style.buttonClick}`} onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport avatar from \"../images/avatar.jpg\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from \"./Users.module.css\"\r\nimport { UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    isAuth: boolean\r\n    followingProgress: Array<number>\r\n    followUsers : (userId : number) => void\r\n    unFollowUsers : (userId : number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({user,followingProgress,followUsers,unFollowUsers,isAuth}) => {\r\n\r\n    return (\r\n            <div className={style.usersBorder}>\r\n                <NavLink to={`/profile/${user.id}`}>\r\n                <img src={user.photos.small != null ? user.photos.small : avatar} alt=\"logo\"/>\r\n                </NavLink>\r\n\r\n                <div>{user.name}</div>\r\n                <div className={style.statusPage}>{user.status}</div>\r\n\r\n                {isAuth ? <div>\r\n                    {user.followed ? <button disabled={followingProgress.some(id => id === user.id)} onClick={\r\n                            () => { unFollowUsers(user.id) }\r\n                        }>Отписаться</button> :\r\n                        <button disabled={followingProgress.some(id => id === user.id) } onClick={\r\n                            () => {followUsers(user.id) }\r\n\r\n                        }>Подписаться</button>}\r\n                </div>\r\n                    : <button disabled={true} >Подписаться</button>}\r\n\r\n            </div>\r\n\r\n    )\r\n            }\r\n\r\nexport default User;","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectors\";\r\n\r\nlet usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype propsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\nexport const UsersSearchForm: React.FC<propsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n        const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n            const filter: FilterType = {\r\n                term: values.term,\r\n                friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n            }\r\n            props.onFilterChanged(filter)\r\n            setSubmitting(false)\r\n        }\r\n        return (\r\n            <div>\r\n                <Formik\r\n                    enableReinitialize={true}\r\n                    initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                    validate={usersSearchFormValidate}\r\n                    onSubmit={submit}\r\n                >\r\n                    {({isSubmitting}) => (\r\n                        <Form>\r\n                            <Field type=\"text\" name=\"term\" placeholder=\"User name\"/>\r\n                            <Field name=\"friend\" as=\"select\">\r\n                                <option value=\"null\">All</option>\r\n                                <option value=\"true\">Only followed</option>\r\n                                <option value=\"false\">Only not followed</option>\r\n                            </Field>\r\n                            <button type=\"submit\" disabled={isSubmitting}>\r\n                                Find\r\n                            </button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n)","import React, {FC, useEffect} from 'react';\r\nimport Paginator from \"../Common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport style from \"./Users.module.css\"\r\nimport {UsersSearchForm} from \"./UsersSearchFrom\";\r\nimport {FilterType, follow, getUsersThunk, unFollow} from \"../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsAuth,\r\n    getPageSize,\r\n    getTotalUserCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport * as queryString from \"querystring\";\r\n\r\n\r\ntype usersType = {}\r\n\r\ntype queryParamsType = { term?: string, page?: string, friend?: string };\r\nexport let Users: FC<usersType> = (props) => {\r\n\r\n    const totalUserCount = useSelector(getTotalUserCount)\r\n    const users = useSelector(getUsers)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingProgress = useSelector(getFollowingInProgress)\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as queryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n        }\r\n\r\n        dispatch(getUsersThunk(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        const query: queryParamsType = {};\r\n        if(!!filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname : \"/users\",\r\n            search: queryString.stringify(query)\r\n        })\r\n    },[filter,currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(getUsersThunk(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsersThunk(1, pageSize, filter))\r\n    }\r\n\r\n    const followUsers = (UserId: number) => {\r\n        dispatch(follow(UserId))\r\n    }\r\n    const unFollowUsers= (UserId: number) => {\r\n        dispatch(unFollow(UserId))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            </div>\r\n\r\n            <div className={style.usersPages}>\r\n                <Paginator currentPage={currentPage}\r\n                           totalUserCount={totalUserCount}\r\n                           pageSize={pageSize}\r\n                           onPageChanged={onPageChanged}\r\n                />\r\n                <div className={style.usersPage}>\r\n                    {\r\n                        users.map(el => {\r\n                            return (\r\n                                <div className={style.users}>\r\n                                    <User user={el}\r\n                                          followingProgress={followingProgress}\r\n                                          isAuth={isAuth}\r\n                                          followUsers={followUsers}\r\n                                          unFollowUsers={unFollowUsers}\r\n                                          key={el.id}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>)\r\n}","import style from \"./Users.module.css\"\r\nimport React from \"react\";\r\nimport Preloader from \"../Common/Reloader\";\r\nimport {getIsFetching} from \"../../redux/users-selectors\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Users} from \"./Users\";\r\n\r\ntype UsersPageType ={\r\n}\r\nconst UsersContainer : React.FC<UsersPageType> = (props)=>{\r\n    let isFetching = useSelector(getIsFetching)\r\n    return(\r\n        <div className={style.pageUsers}>\r\n            {isFetching ? <Preloader/> : null}\r\n            <Users />\r\n        </div>\r\n    )\r\n}\r\nexport  default UsersContainer;\r\n\r\n\r\n"],"sourceRoot":""}